from rest_framework import serializers
import uuid
from django.db import models


class FeedType(models.TextChoices):
    RSS = "rss"
    ATOM = "atom"
    SKELETON = "skeleton"

DESCRIPTION_HELP_TEXT = "found in the <channel> of RSS output. Is always kept up to date with the latest feed import values for this property."
TITLE_HELP_TEXT = "found in the <channel> of RSS output. Is always kept up to date with the latest feed import values for this property."
# FeedSerializer converted to pure Serializer
class FeedXSerializer(serializers.Serializer):
    id = serializers.UUIDField(default=uuid.uuid4, help_text="UUID of feed generated by history4feed", read_only=True)
    title = serializers.CharField(max_length=1000, help_text=TITLE_HELP_TEXT, required=False, allow_null=True)
    description = serializers.CharField(max_length=1000, help_text=DESCRIPTION_HELP_TEXT, required=False, allow_null=True)
    url = serializers.URLField(max_length=1000, help_text="The URL of the RSS or ATOM feed")
    earliest_item_pubdate = serializers.DateTimeField(allow_null=True, help_text="pubdate of earliest post", read_only=True)
    latest_item_pubdate = serializers.DateTimeField(allow_null=True, help_text="pubdate of latest post", read_only=True)
    datetime_added = serializers.DateTimeField(read_only=True, help_text="date feed entry was added to database")
    feed_type = serializers.ChoiceField(choices=FeedType.choices, help_text="type of feed", read_only=True)
    pretty_url = serializers.URLField(allow_null=True, max_length=1000, required=False, help_text="This is a cosmetic URL. It is designed to show the actual blog link to browse to in a web browser (not the feed)")

    # Added custom field for post count
    count_of_posts = serializers.IntegerField(read_only=True, help_text="Number of posts in feed")
    
    # Added custom fields for profile and remote blogs
    profile_id = serializers.UUIDField(write_only=True, required=False, allow_null=True)
    include_remote_blogs = serializers.BooleanField(write_only=True, default=False)

class SkeletonFeedXSerializer(FeedXSerializer):
    include_remote_blogs = None
    profile_id = None
    title = serializers.CharField(required=True, help_text=TITLE_HELP_TEXT, allow_null=True)
    description = serializers.CharField(required=True, help_text=DESCRIPTION_HELP_TEXT, allow_null=True)
    feed_type = serializers.HiddenField(default=FeedType.SKELETON)


class PostXSerializer(serializers.Serializer):
    id = serializers.UUIDField(read_only=True, help_text="UUID of items generated by history4feed")
    datetime_added = serializers.DateTimeField(read_only=True, help_text="Date when the item was added.")
    datetime_updated = serializers.DateTimeField(read_only=True, help_text="Date when the item was last updated.")
    title = serializers.CharField(max_length=1000, help_text="Found in the <item> element of feed output")
    description = serializers.CharField(required=False, allow_blank=True, help_text="Found in the <item> element of feed output")
    link = serializers.URLField(max_length=1000, help_text="Link to the full article, found in the <item> element of feed output")
    pubdate = serializers.DateTimeField(help_text="Date of publication.")
    author = serializers.CharField(max_length=1000, required=False, allow_blank=True, help_text="Author of the post")
    categories = serializers.ListField(child=serializers.CharField(), required=False, help_text="Categories of the post", allow_empty=True)
    is_full_text = serializers.BooleanField(default=False, read_only=True, help_text="If full text has been retrieved")
    content_type = serializers.CharField(max_length=200, default="plain/text", read_only=True, help_text="Content type of the description")
    added_manually = serializers.BooleanField(default=False, read_only=True, help_text="Indicates whether the post was added manually")
