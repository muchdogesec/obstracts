name: Run Tests

permissions:
  contents: read
  
on:
  push:
    branches:
      - main
  pull_request:

jobs:
  test-schema-thesis:
    runs-on: ubuntu-latest
    environment: test_pipeline

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
    
          
      - name: Set .env for docker-compose
        run: |
            echo "HISTORY4FEED_EARLIEST_SEARCH_DATE=$(date -u -d yesterday +'%Y-%m-%dT%H:%M:%SZ')" >> .env
            echo "SCRAPFLY_APIKEY=${{secrets.SCRAPFLY_APIKEY}}" >> .env


            cat tests/st/.env.schemathesis >> .env
            cp tests/st/docker-compose.yml arango-compose.yml

            echo ==== env file start =====
            cat .env
            echo
            echo ==== env file end   =====

         
      - name: Start docker-compose
        uses: hoverkraft-tech/compose-action@v2.0.2
        with:
          compose-file: |
            arango-compose.yml
          compose-flags:
            --env-file .env
            -p obstracts-action

      - name: Get IP addresses
        id: get_ip
        run: |
              IP_ADDRESS=$(docker network inspect -f '{{range.IPAM.Config}}{{.Gateway}}{{end}}' obstracts-action_default)
              echo "ip_address=$IP_ADDRESS" >> "$GITHUB_OUTPUT"
              echo "IP_ADDRESS=$IP_ADDRESS" >> "$GITHUB_OUTPUT"
              echo "SERVICE_BASE_URL=http://$IP_ADDRESS:18529/" >> "$GITHUB_OUTPUT"
              cat "$GITHUB_OUTPUT"

    

      - name: test all endpoints 1
        id: test-endpoints
        run: |
          pip install -e '.[test]' -r requirements.txt
          echo ARANGODB_HOST_URL="http://${{ steps.get_ip.outputs.IP_ADDRESS }}:18529" >> tests/tests.env
          echo POSTGRES_HOST="${{ steps.get_ip.outputs.IP_ADDRESS }}" >> tests/tests.env
          echo PYTHONPATH=. >> tests/tests.env
          set -a; source .env; source tests/tests.env; set +a
          export DJANGO_WWW_PATH=$PWD/django_www_path/


          pytest --cov --cov-branch --cov-report=xml --junitxml=unittest.junit.xml -o junit_family=legacy tests/src
      
      - name: test schema
        if: ${{ steps.get_ip.conclusion == 'success' }}
        run: |
          set -a; source .env; source tests/tests.env; set +a
          pytest --cov --cov-branch --cov-append --cov-report=xml --junitxml=schemathesis.junit.xml -o junit_family=legacy tests/st/test_schemathesis.py

            

      - name: Upload coverage reports to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: unittest.junit.xml
          flags: unittest

      
      - name: Upload schemathesis test results to Codecov
        if: ${{ !cancelled() }}
        uses: codecov/test-results-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: schemathesis.junit.xml
          flags: schemathesis
