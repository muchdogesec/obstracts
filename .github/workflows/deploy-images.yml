name: Create and publish the Docker image for Obstracts Web Staging
description: This workflow builds a Docker image and pushes it to GitHub Container Registry (GHCR) when changes are pushed to the `staging` branch. It uses secrets in the `obstracts_staging` environment and therefore keeps the visibility as private for the image.

on:
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}_web_staging

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    environment: obstracts_web_staging
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.deploy
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          visibility: private
          build-args: |
            MAX_PAGE_SIZE=50
            DEFAULT_PAGE_SIZE=50
            CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=1
            INPUT_TOKEN_LIMIT=12500
            USE_S3_STORAGE=1
            CTIBUTLER_HOST='http://37.27.208.239:8006'
            VULMATCH_HOST='http://37.27.208.239:8005'
            HISTORY4FEED_URL='http://host.docker.internal:8002/'
            ARANGODB_HOST_URL='http://host.docker.internal:8529'
            POSTGRES_DB='obstracts_database'
            POSTGRES_HOST='host.docker.internal'
            R2_CUSTOM_DOMAIN='static.obstracts.com'
            DJANGO_SECRET=${{ secrets.DJANGO_SECRET }}
            DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            ARANGODB_USERNAME=${{ secrets.ARANGODB_USERNAME }}
            ARANGODB_PASSWORD=${{ secrets.ARANGODB_PASSWORD }}
            BIN_LIST_API_KEY=${{ secrets.BIN_LIST_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
            GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
            GOOGLE_VISION_API_KEY=${{ secrets.GOOGLE_VISION_API_KEY }}
            R2_ENDPOINT_URL=${{ secrets.R2_ENDPOINT_URL }}
            R2_BUCKET_NAME=${{ secrets.R2_BUCKET_NAME }}
            R2_ACCESS_KEY=${{ secrets.R2_ACCESS_KEY }}
            R2_SECRET_KEY=${{ secrets.R2_SECRET_KEY }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

name: Create and publish the Docker image for Obstracts Web Production
description: This workflow builds a Docker image and pushes it to GitHub Container Registry (GHCR) when changes are pushed to the `main` branch. It uses secrets in the `obstracts_production` environment and therefore keeps the visibility as private for the image.

on:
  push:
    branches: ['main']

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}_web_production

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    environment: obstracts_web_production
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Log in to the Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile.deploy
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          visibility: private
          build-args: |
            MAX_PAGE_SIZE=50
            DEFAULT_PAGE_SIZE=50
            CELERY_BROKER_CONNECTION_RETRY_ON_STARTUP=1
            INPUT_TOKEN_LIMIT=12500
            USE_S3_STORAGE=1
            CTIBUTLER_HOST='http://37.27.208.239:8006'
            VULMATCH_HOST='http://37.27.208.239:8005'
            HISTORY4FEED_URL='http://host.docker.internal:8002/'
            ARANGODB_HOST_URL='http://host.docker.internal:8529'
            POSTGRES_DB='obstracts_database'
            POSTGRES_HOST='host.docker.internal'
            R2_CUSTOM_DOMAIN='static.obstracts.com'
            DJANGO_SECRET=${{ secrets.DJANGO_SECRET }}
            DJANGO_DEBUG=${{ secrets.DJANGO_DEBUG }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
            ARANGODB_USERNAME=${{ secrets.ARANGODB_USERNAME }}
            ARANGODB_PASSWORD=${{ secrets.ARANGODB_PASSWORD }}
            BIN_LIST_API_KEY=${{ secrets.BIN_LIST_API_KEY }}
            OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}
            ANTHROPIC_API_KEY=${{ secrets.ANTHROPIC_API_KEY }}
            GOOGLE_API_KEY=${{ secrets.GOOGLE_API_KEY }}
            GOOGLE_VISION_API_KEY=${{ secrets.GOOGLE_VISION_API_KEY }}
            R2_ENDPOINT_URL=${{ secrets.R2_ENDPOINT_URL }}
            R2_BUCKET_NAME=${{ secrets.R2_BUCKET_NAME }}
            R2_ACCESS_KEY=${{ secrets.R2_ACCESS_KEY }}
            R2_SECRET_KEY=${{ secrets.R2_SECRET_KEY }}
      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true